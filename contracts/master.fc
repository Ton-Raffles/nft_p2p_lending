#include "imports/stdlib.fc";
#include "constants.fc";
#include "master_storage.fc";
#include "master_messages.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::nft::ownership_assigned) {
        slice prev_owner = in_msg_body~load_msg_addr();
        throw_unless(error::not_enough_value, msg_value >= get_compute_fee(0, const::fee_const));

        if (equal_slices(context::sender, data::nft)) {
            data::active = 1;
        } else {
            send_nft(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), context::query_id, prev_owner);
        }
    }

    elseif (context::op == op::cancellation) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::owner));
        throw_unless(error::offer_alredy_accepted, data::offer_accept == 0);

        (slice key, slice val, int flag) = data::offers.dict_get_min?(267);
        while (flag) {
            send_cancellation(key, context::query_id);
            (key, val, flag) = data::offers.dict_get_next?(267, key);
        }

        send_nft(data::nft, data::nft_fee, context::query_id, data::owner);

        send_destroy(data::owner);
    }

    elseif (context::op == op::make_offer) {
        throw_unless(error::wrong_asset, equal_slices(const::ton_key, data::jetton_wallet));
        throw_unless(error::not_active, data::active == 1);
        throw_unless(error::offer_alredy_accepted, data::offer_accept == 0);

        slice owner = in_msg_body~load_msg_addr();
        int offer_amount = in_msg_body~load_coins();
        int apr_amount = in_msg_body~load_coins();
        int loan_duration = in_msg_body~load_uint(64);

        throw_unless(error::not_enough_value, msg_value >= get_compute_fee(0, const::fee_const) + offer_amount);

        int amount = msg_value - get_compute_fee(0, const::fee_const) * 3;

        if (data::amount > 0) {
            throw_unless(error::not_correct_value, data::amount <= offer_amount);
            if (amount - offer_amount > get_compute_fee(0, const::fee_const_min)) {
                send_return_fees_const(context::sender, amount - offer_amount);
                amount = offer_amount;
            }
        }

        if (data::apr_amount > 0) {
            throw_unless(error::not_correct_apr, data::apr_amount <= apr_amount);
        }
        if (data::loan_duration > 0) {
            throw_unless(error::not_correct_loan_duration, data::loan_duration <= loan_duration);
        }

        (cell stateinit, slice address) = get_stateinit_and_address_of_helper(const::ton_key, owner, data::current_helper_id);
        data::current_helper_id += 1;

        send_set_data(address, stateinit, amount, context::query_id, const::ton_key, offer_amount, loan_duration, apr_amount);

        data::offers~dict_set(267, address, begin_cell().end_cell().begin_parse());
    }

    elseif (context::op == op::jetton::transfer_notification) {
        int amount = in_msg_body~load_coins();
        slice user = in_msg_body~load_msg_addr();

        ifnot (equal_slices(data::jetton_wallet, context::sender)) {
            send_jettons(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
            return ();
        }

        if ((data::active == 0)
        | (data::offer_accept == 1)
        | (msg_value < get_compute_fee(0, const::fee_const) * 3 + const::fee_for_transfer_jettons) * 2) {
            send_jettons(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
            return ();
        }

        slice forward_payload = in_msg_body;
        if (forward_payload~load_int(1)) {
            forward_payload = forward_payload~load_ref().begin_parse();
        }

        int op = forward_payload~load_uint(32);

        if (op == op::make_offer) {
            slice owner = forward_payload~load_msg_addr();
            slice helper_jetton_wallet = forward_payload~load_msg_addr();
            slice owner_jetton_wallet = forward_payload~load_msg_addr();
            slice forward_payload = forward_payload~load_ref().begin_parse();
            int offer_amount = forward_payload~load_coins();
            int apr_amount = forward_payload~load_coins();
            int loan_duration = forward_payload~load_uint(64);

            if (data::amount > 0) {
                if (data::amount > offer_amount) {
                    send_jettons(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
                    return ();
                }
                if (amount < offer_amount) {
                    send_jettons(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
                    return ();
                }
                if (amount > offer_amount) {
                    send_jettons(context::sender, const::fee_for_transfer_jettons, amount - offer_amount, user);
                    amount = offer_amount;
                    msg_value -= const::fee_for_transfer_jettons;
                }
            }
            if (data::apr_amount > 0) {
                if (data::apr_amount > apr_amount) {
                    send_jettons(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
                    return ();
                }
            }
            if (data::loan_duration > 0) {
                if (data::loan_duration > loan_duration) {
                    send_jettons(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
                    return ();
                }
            }
            (cell stateinit, slice address) = get_stateinit_and_address_of_helper(owner_jetton_wallet, user, data::current_helper_id);
            data::current_helper_id += 1;

            send_set_data(address, stateinit, const::fee_for_transfer_jettons, context::query_id, helper_jetton_wallet, offer_amount, loan_duration, apr_amount);
            msg_value -= get_compute_fee(0, const::fee_const);

            send_jettons(context::sender, const::fee_for_transfer_jettons, offer_amount, address);
            msg_value -= const::fee_for_transfer_jettons;

            msg_value -= get_compute_fee(0, const::fee_const);
            if (msg_value > get_compute_fee(0, const::fee_const_min)) {
                send_return_fees_const(user, msg_value);
            }

            data::offers~dict_set(267, address, begin_cell().end_cell().begin_parse());
        } 
        
        else {
            send_jettons(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
        }

    }

    elseif (context::op == op::process_accept) {
        (_, int f?) = data::offers.dict_get?(267, context::sender);
        throw_unless(error::wrong_sender, f?);
        throw_unless(error::offer_alredy_accepted, data::offer_accept == 0);

        (slice key, slice val, int flag) = data::offers.dict_get_min?(267);
        while (flag) {
            ifnot (equal_slices(key, context::sender)) {
                send_cancellation(key, context::query_id);
            }
            (key, val, flag) = data::offers.dict_get_next?(267, key);
        }

        data::offer_accept = 1;
    }

    elseif (context::op == op::process_cancellation) {
        (_, int f?) = data::offers.dict_get?(267, context::sender);
        throw_unless(error::wrong_sender, f?);

        data::offers~dict_delete?(267, context::sender);
    }

    elseif (context::op == op::change_data) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::owner));
        
        if (in_msg_body~load_uint(1) == 1){
            data::jetton_wallet = in_msg_body~load_msg_addr();
        }
        if (in_msg_body~load_uint(1) == 1){
            data::amount = in_msg_body~load_coins();
        }
        if (in_msg_body~load_uint(1) == 1){
            data::loan_duration = in_msg_body~load_uint(64);
        }
        if (in_msg_body~load_uint(1) == 1){
            data::apr_amount = in_msg_body~load_coins();
        }
    }

    elseif (context::op == op::give_away_nft) {
        (_, int f?) = data::offers.dict_get?(267, context::sender);
        throw_unless(error::wrong_sender, f?);

        slice user = in_msg_body~load_msg_addr();

        send_nft(data::nft, data::nft_fee, context::query_id, user);

        send_destroy(user);
    }

    elseif (context::op == op::return_nft) {
        (_, int f?) = data::offers.dict_get?(267, context::sender);
        throw_unless(error::wrong_sender, f?);

        slice user = in_msg_body~load_msg_addr();

        send_nft(data::nft, data::nft_fee, context::query_id, data::owner);

        send_destroy(user);
    }

    elseif (context::op == op::send_service_message) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::platform));
        accept_message();

        cell message = in_msg_body~load_ref();
        int mode = in_msg_body~load_uint(8);

        send_raw_message(message, mode);
    }

    else {
        throw(0xffff);
    }

    save_data();
}

(slice, slice, slice, int, int, cell, int, int, int, cell, slice, int, int) get_contract_data() method_id {
    load_data();
    return (data::owner, data::nft, data::jetton_wallet, data::active, data::offer_accept, data::offers, data::amount, data::loan_duration, data::apr_amount, data::helper_code, data::platform, data::platform_fee, data::current_helper_id);
}

(slice) get_helper_address(slice owner_jetton_wallet, slice user, int helper_id) method_id {
    load_data();

    (_ , slice address) = get_stateinit_and_address_of_helper(owner_jetton_wallet, user, helper_id);
    return address;
}