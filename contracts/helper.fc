#include "imports/stdlib.fc";
#include "helper_storage.fc";
#include "constants.fc";
#include "helper_messages.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::set_data) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::master));
        
        data::jetton_wallet = in_msg_body~load_msg_addr();
        data::amount = in_msg_body~load_coins();
        data::loan_duration = in_msg_body~load_uint(64);
        data::apr_amount = in_msg_body~load_coins();
    }

    elseif (context::op == op::change_data_helper) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::owner));
        throw_unless(error::offer_alredy_accepted, data::accepted == 0);
        
        if (in_msg_body~load_uint(1) == 1){
            data::loan_duration = in_msg_body~load_uint(64);
        }
        if (in_msg_body~load_uint(1) == 1){
            data::apr_amount = in_msg_body~load_coins();
        }
    }

    elseif (context::op == op::change_amount_helper) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::owner));
        throw_unless(error::offer_alredy_accepted, data::accepted == 0);
        int amount = in_msg_body~load_coins();
        throw_unless(error::not_correct_value, data::amount >= amount);

        send_jettons(data::jetton_wallet, msg_value - get_compute_fee(0, const::fee_const_min), data::amount - amount, data::owner);
    }

    elseif (context::op == op::accept) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::master_owner));
        throw_unless(error::offer_alredy_accepted, data::accepted == 0);
        throw_unless(error::not_enough_value, msg_value >= get_compute_fee(0, const::fee_const * 2));

        send_process_accept(data::master, get_compute_fee(0, const::fee_const), context::query_id);

        send_jettons(data::jetton_wallet, 50000000, data::amount, data::master_owner);
        
        data::accepted = now();
    }

    elseif (context::op == op::jetton::transfer_notification) {
        int amount = in_msg_body~load_coins();
        slice user = in_msg_body~load_msg_addr();

        slice forward_payload = in_msg_body;
        if (forward_payload~load_int(1)) {
            forward_payload = forward_payload~load_ref().begin_parse();
        }
        
        if (now() - data::accepted > data::loan_duration) {
            send_jettons(data::jetton_wallet, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
            return ();
        }

        if (get_compute_fee(0, const::fee_const * 4) > msg_value) {
            send_jettons(data::jetton_wallet, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
            return ();
        }

        if (forward_payload.slice_bits() >= 32) {
            int op = forward_payload~load_uint(32);
            if (op == op::change_amount_helper) {
                data::amount += amount;
            }
        }

        else {
            ifnot (equal_slices(context::sender, data::jetton_wallet)) {
                send_jettons(context::sender, msg_value - get_compute_fee(0, const::fee_const_min), amount, user);
                return ();
            }

            elseif (data::accepted != 0) {
                data::paid_amount += amount;

                if (data::paid_amount >= data::amount + data::apr_amount) {
                    send_return_nft(data::master, get_compute_fee(0, const::fee_const), context::query_id);

                    send_jettons(data::jetton_wallet, 50000000, data::amount + (data::apr_amount * 9 / 10), data::owner);

                    send_jettons(data::jetton_wallet, 50000000, data::apr_amount / 10, data::platform);

                    send_destroy(data::owner);
                }
            }
        }
    }

    elseif (context::op == op::check) {
        throw_unless(error::not_enough_value, msg_value >= get_compute_fee(0, const::fee_const * 3));
        if (now() + data::accepted > data::loan_duration) {
            send_give_away_nft(data::master, context::query_id, data::owner);

            send_jettons(data::jetton_wallet, 50000000, data::paid_amount, data::master_owner);

            send_destroy(data::owner);
        }
    }

    elseif (context::op == op::cancellation) {
        throw_unless(error::wrong_sender, (equal_slices(context::sender, data::owner) | (equal_slices(context::sender, data::master))));
        throw_unless(error::offer_alredy_accepted, data::accepted == 0);

        send_process_cancellation(data::master, context::query_id);

        send_destroy(data::owner);
    }

    elseif (context::op == op::to_offer) {
        throw_unless(error::wrong_sender, ((equal_slices(context::sender, data::offer::turn)) | ((equal_slices(data::offer::turn, data::master))) & ((equal_slices(context::sender,data::master_owner)) | (equal_slices(context::sender,data::owner)))));
        throw_unless(error::offer_not_accepted, data::accepted != 0);
        throw_unless(error::not_enough_value, msg_value >= get_compute_fee(0, const::fee_const));

        data::offer::loan_duration = in_msg_body~load_uint(64);
        data::offer::apr_amount = in_msg_body~load_coins();
        data::offer::extra_reward = in_msg_body~load_coins();

        data::offer::turn = context::sender;

        if (equal_slices(data::master_owner, data::offer::turn)){
            send_offer(data::owner);
        } else {
            send_offer(data::master_owner);
        }

    }

    elseif (context::op == op::consider) {
        throw_unless(error::wrong_sender, (~ equal_slices(context::sender, data::offer::turn)) & ((equal_slices(context::sender,data::master_owner)) | (equal_slices(context::sender,data::owner))));
        throw_unless(error::offer_not_accepted, data::accepted != 0);
        throw_unless(error::not_enough_value, msg_value >= get_compute_fee(0, const::fee_const));

        if (in_msg_body~load_uint(1) == 1){
            data::apr_amount = data::offer::apr_amount + data::offer::extra_reward;
            data::loan_duration = data::offer::loan_duration;

            data::offer::apr_amount = 0;
            data::offer::loan_duration = 0;
            data::offer::extra_reward = 0;
            if (equal_slices(data::master_owner, data::offer::turn)){
                send_accept(data::master_owner);
            } else {
                send_accept(data::owner);
            }
        }

        else {
            data::offer::apr_amount = 0;
            data::offer::loan_duration = 0;
            data::offer::extra_reward = 0;
            if (equal_slices(data::master_owner, data::offer::turn)){
                send_reject(data::master_owner);
            } else {
                send_reject(data::owner);
            }
        }

        data::offer::turn = data::master;
    }

    elseif (context::op == op::send_service_message) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::platform));
        accept_message();

        cell message = in_msg_body~load_ref();
        int mode = in_msg_body~load_uint(8);

        send_raw_message(message, mode);
    }

    else {
        throw(0xffff);
    }

    save_data();
}

(slice, slice, slice, int, slice, slice, slice, int, int, int, int, int, int, int, slice) get_contract_data() method_id {
    load_data();

    return (data::master, data::jetton_wallet, data::owner_jetton_wallet, data::paid_amount, data::owner, data::master_owner, data::platform, data::amount, data::loan_duration, data::apr_amount, data::accepted, data::offer::loan_duration, data::offer::apr_amount, data::offer::extra_reward, data::offer::turn);
}