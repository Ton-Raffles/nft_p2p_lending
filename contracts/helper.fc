#include "imports/stdlib.fc";
#include "constants.fc";

global slice data::master;
global slice data::jetton_wallet;
global slice data::owner_jetton_wallet;
global int data::paid_amount;
global slice data::owner;
global slice data::master_owner;
global slice data::platform;
global int data::amount;
global int data::loan_duration;
global int data::apr_amount;
global int data::accepted;

global int context::op;
global int context::query_id;
global slice context::sender;

() load_data() impure {
    slice ds = get_data().begin_parse();
    slice dv = ds~load_ref().begin_parse();
    slice dm = ds~load_ref().begin_parse();
    data::master = dv~load_msg_addr();
    data::jetton_wallet = dv~load_msg_addr();
    data::owner_jetton_wallet = dv~load_msg_addr();
    data::paid_amount = dv~load_coins();
    data::owner = dm~load_msg_addr();
    data::master_owner = dm~load_msg_addr();
    data::platform = dm~load_msg_addr();
    data::amount = ds~load_coins();
    data::loan_duration = ds~load_uint(64);
    data::apr_amount = ds~load_coins();
    data::accepted = ds~load_uint(64);
}

() save_data() impure {
    set_data(begin_cell()
        .store_ref(begin_cell()
            .store_slice(data::master)
            .store_slice(data::jetton_wallet)
            .store_slice(data::owner_jetton_wallet)
            .store_coins(data::paid_amount)
        .end_cell())
        .store_ref(begin_cell()
            .store_slice(data::owner)
            .store_slice(data::master_owner)
            .store_slice(data::platform)
        .end_cell())
        .store_coins(data::amount)
        .store_uint(data::loan_duration, 64)
        .store_coins(data::apr_amount)
        .store_uint(data::accepted, 64)
    .end_cell());
}

() return_jettons(slice jetton_wallet, int amount, slice user) impure {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet)
        .store_coins(0)
        .store_uint(0, 107)
        .store_uint(op::jetton::transfer, 32)
        .store_uint(context::query_id, 64)
        .store_coins(amount)
        .store_slice(user)
        .store_uint(0, 8)
    .end_cell(), 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::set_data) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::master));
        
        data::jetton_wallet = in_msg_body~load_msg_addr();
        data::amount = in_msg_body~load_coins();
        data::loan_duration = in_msg_body~load_uint(64);
        data::apr_amount = in_msg_body~load_coins();
    }

    elseif (context::op == op::change_data_helper) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::owner));
        throw_unless(error::offer_alredy_accepted, data::accepted == 0);
        
        if (in_msg_body~load_uint(1) == 1){
            data::loan_duration = in_msg_body~load_uint(64);
        }
        if (in_msg_body~load_uint(1) == 1){
            data::apr_amount = in_msg_body~load_coins();
        }
    }

    elseif (context::op == op::change_amount_helper) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::owner));
        throw_unless(error::offer_alredy_accepted, data::accepted == 0);
        int amount = in_msg_body~load_coins();
        throw_unless(error::not_correct_value, data::amount >= amount);
        
        int value = data::amount - amount;
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::jetton_wallet)
            .store_coins(0)
            .store_uint(0, 107)
            .store_uint(op::jetton::transfer, 32)
            .store_uint(context::query_id, 64)
            .store_coins(value)
            .store_slice(data::owner)
            .store_uint(0, 8)
        .end_cell(), 64);
    }

    elseif (context::op == op::accept) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::master_owner));
        throw_unless(error::offer_alredy_accepted, data::accepted == 0);
        throw_unless(error::not_enough_value, msg_value >= const::fees * 2);

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::master)
            .store_coins(const::fees)
            .store_uint(0, 107)
            .store_uint(op::process_accept, 32)
            .store_uint(context::query_id, 64)
        .end_cell(), 0);

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::jetton_wallet)
            .store_coins(const::fees)
            .store_uint(0, 107)
            .store_uint(op::jetton::transfer, 32)
            .store_uint(context::query_id, 64)
            .store_coins(data::amount)
            .store_slice(data::master_owner)
            .store_uint(0, 8)
        .end_cell(), 0);
        
        data::accepted = now();
    }

    elseif (context::op == op::jetton::transfer_notification) {
        int amount = in_msg_body~load_coins();
        slice user = in_msg_body~load_msg_addr();

        slice forward_payload = in_msg_body;
        if (forward_payload~load_int(1)) {
            forward_payload = forward_payload~load_ref().begin_parse();
        }
        
        if (now() - data::accepted > data::loan_duration) {
            return_jettons(context::sender, amount, user);
            return ();
        }

        if (const::fees * 3 > msg_value) {
            return_jettons(context::sender, amount, user);
            return ();
        }

        if (forward_payload.slice_bits() >= 32) {
            int op = forward_payload~load_uint(32);
            if (op == op::change_amount_helper) {
                data::amount += amount;
            }
        }

        else {
            if (~ equal_slices(context::sender, data::jetton_wallet)) {
                return_jettons(context::sender, amount, user);
                return ();
            }

            elseif (data::accepted != 0) {
                data::paid_amount += amount;

                if (data::paid_amount >= data::amount + data::apr_amount) {
                    send_raw_message(begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(data::master)
                        .store_coins(const::fees)
                        .store_uint(0, 107)
                        .store_uint(op::return_nft, 32)
                        .store_uint(context::query_id, 64)
                    .end_cell(), 0);

                    send_raw_message(begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(data::jetton_wallet)
                        .store_coins(const::fees)
                        .store_uint(0, 107)
                        .store_uint(op::jetton::transfer, 32)
                        .store_uint(context::query_id, 64)
                        .store_coins(data::amount + (data::apr_amount * 9 / 10))
                        .store_slice(data::owner)
                        .store_uint(0, 8)
                    .end_cell(), 0);

                    send_raw_message(begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(data::jetton_wallet)
                        .store_coins(const::fees)
                        .store_uint(0, 107)
                        .store_uint(op::jetton::transfer, 32)
                        .store_uint(context::query_id, 64)
                        .store_coins(data::apr_amount / 10)
                        .store_slice(data::platform)
                        .store_uint(0, 8)
                    .end_cell(), 0);

                    send_raw_message(begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(data::owner)
                        .store_coins(0)
                        .store_uint(0, 107)
                    .end_cell(), 128 + 32);
                }
            }
        }
    }

    elseif (context::op == op::check) {
        throw_unless(error::not_enough_value, msg_value >= const::fees);
        if (now() + data::accepted > data::loan_duration) {
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(data::master)
                .store_coins(const::fees)
                .store_uint(0, 107)
                .store_uint(op::give_away_nft, 32)
                .store_uint(context::query_id, 64)
                .store_slice(data::owner)
            .end_cell(), 0);

            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(data::jetton_wallet)
                .store_coins(const::fees)
                .store_uint(0, 107)
                .store_uint(op::jetton::transfer, 32)
                .store_uint(context::query_id, 64)
                .store_coins(data::paid_amount)
                .store_slice(data::master_owner)
                .store_uint(0, 8)
            .end_cell(), 0);

            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(data::owner)
                .store_coins(0)
                .store_uint(0, 107)
            .end_cell(), 128 + 32);
        }
    }

    elseif (context::op == op::cancellation) {
        throw_unless(error::wrong_sender, (equal_slices(context::sender, data::owner) | (equal_slices(context::sender, data::master))));
        throw_unless(error::offer_alredy_accepted, data::accepted == 0);

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::master)
            .store_coins(20000000)
            .store_uint(0, 107)
            .store_uint(op::process_cancellation, 32)
            .store_uint(context::query_id, 64)
        .end_cell(), 0);    

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::owner)
            .store_coins(0)
            .store_uint(0, 107)
        .end_cell(), 128 + 32);
    }

    else {
        throw(0xffff);
    }

    save_data();
}

(slice, slice, slice, int, slice, slice, slice, int, int, int, int) get_contract_data() method_id {
    load_data();

    return (data::master, data::jetton_wallet, data::owner_jetton_wallet, data::paid_amount, data::owner, data::master_owner, data::platform, data::amount, data::loan_duration, data::apr_amount, data::accepted);
}